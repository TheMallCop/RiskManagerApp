//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Data Services
    
    /// <summary>
    /// Provides members to query and update data in the ApplicationData datasource.
    /// </summary>
    public sealed partial class ApplicationDataService
        : global::LightSwitchApplication.ApplicationData
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ApplicationDataService() : base()
        {
        }
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Server Interceptions Points
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Inserting(global::LightSwitchApplication.Employee entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Inserted(global::LightSwitchApplication.Employee entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Updating(global::LightSwitchApplication.Employee entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Updated(global::LightSwitchApplication.Employee entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Deleting(global::LightSwitchApplication.Employee entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Deleted(global::LightSwitchApplication.Employee entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Validate(global::LightSwitchApplication.Employee entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Employee, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HazardTypes_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HazardTypes_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HazardTypes_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HazardTypes_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HazardTypes_Inserting(global::LightSwitchApplication.HazardType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HazardTypes_Inserted(global::LightSwitchApplication.HazardType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HazardTypes_Updating(global::LightSwitchApplication.HazardType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HazardTypes_Updated(global::LightSwitchApplication.HazardType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HazardTypes_Deleting(global::LightSwitchApplication.HazardType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HazardTypes_Deleted(global::LightSwitchApplication.HazardType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HazardTypes_Validate(global::LightSwitchApplication.HazardType entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HazardTypes_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.HazardType, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentHazards_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentHazards_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentHazards_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentHazards_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentHazards_Inserting(global::LightSwitchApplication.RiskAssessmentHazard entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentHazards_Inserted(global::LightSwitchApplication.RiskAssessmentHazard entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentHazards_Updating(global::LightSwitchApplication.RiskAssessmentHazard entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentHazards_Updated(global::LightSwitchApplication.RiskAssessmentHazard entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentHazards_Deleting(global::LightSwitchApplication.RiskAssessmentHazard entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentHazards_Deleted(global::LightSwitchApplication.RiskAssessmentHazard entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentHazards_Validate(global::LightSwitchApplication.RiskAssessmentHazard entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentHazards_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessmentHazard, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentReviews_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentReviews_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentReviews_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentReviews_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentReviews_Inserting(global::LightSwitchApplication.RiskAssessmentReview entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentReviews_Inserted(global::LightSwitchApplication.RiskAssessmentReview entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentReviews_Updating(global::LightSwitchApplication.RiskAssessmentReview entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentReviews_Updated(global::LightSwitchApplication.RiskAssessmentReview entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentReviews_Deleting(global::LightSwitchApplication.RiskAssessmentReview entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentReviews_Deleted(global::LightSwitchApplication.RiskAssessmentReview entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentReviews_Validate(global::LightSwitchApplication.RiskAssessmentReview entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentReviews_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessmentReview, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessments_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessments_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessments_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessments_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessments_Inserting(global::LightSwitchApplication.RiskAssessment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessments_Inserted(global::LightSwitchApplication.RiskAssessment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessments_Updating(global::LightSwitchApplication.RiskAssessment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessments_Updated(global::LightSwitchApplication.RiskAssessment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessments_Deleting(global::LightSwitchApplication.RiskAssessment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessments_Deleted(global::LightSwitchApplication.RiskAssessment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessments_Validate(global::LightSwitchApplication.RiskAssessment entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessments_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessment, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentStatuses_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentStatuses_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentStatuses_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentStatuses_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentStatuses_Inserting(global::LightSwitchApplication.RiskAssessmentStatus entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentStatuses_Inserted(global::LightSwitchApplication.RiskAssessmentStatus entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentStatuses_Updating(global::LightSwitchApplication.RiskAssessmentStatus entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentStatuses_Updated(global::LightSwitchApplication.RiskAssessmentStatus entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentStatuses_Deleting(global::LightSwitchApplication.RiskAssessmentStatus entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentStatuses_Deleted(global::LightSwitchApplication.RiskAssessmentStatus entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentStatuses_Validate(global::LightSwitchApplication.RiskAssessmentStatus entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessmentStatuses_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessmentStatus, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessors_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessors_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessors_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessors_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessors_Inserting(global::LightSwitchApplication.RiskAssessor entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessors_Inserted(global::LightSwitchApplication.RiskAssessor entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessors_Updating(global::LightSwitchApplication.RiskAssessor entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessors_Updated(global::LightSwitchApplication.RiskAssessor entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessors_Deleting(global::LightSwitchApplication.RiskAssessor entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessors_Deleted(global::LightSwitchApplication.RiskAssessor entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessors_Validate(global::LightSwitchApplication.RiskAssessor entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskAssessors_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessor, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskTypes_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskTypes_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskTypes_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskTypes_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskTypes_Inserting(global::LightSwitchApplication.RiskType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskTypes_Inserted(global::LightSwitchApplication.RiskType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskTypes_Updating(global::LightSwitchApplication.RiskType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskTypes_Updated(global::LightSwitchApplication.RiskType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskTypes_Deleting(global::LightSwitchApplication.RiskType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskTypes_Deleted(global::LightSwitchApplication.RiskType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskTypes_Validate(global::LightSwitchApplication.RiskType entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RiskTypes_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskType, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executed();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MyRiskAssessmentReviews_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void MyRiskAssessmentReviews_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MyRiskAssessmentReviews_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.RiskAssessmentReview> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void MyRiskAssessmentReviews_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.RiskAssessmentReview> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void MyRiskAssessmentReviews_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OverdueRiskAssessmentReviews_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void OverdueRiskAssessmentReviews_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OverdueRiskAssessmentReviews_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.RiskAssessmentReview> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void OverdueRiskAssessmentReviews_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.RiskAssessmentReview> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void OverdueRiskAssessmentReviews_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MyRiskAssessments_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void MyRiskAssessments_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MyRiskAssessments_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.RiskAssessment> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void MyRiskAssessments_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.RiskAssessment> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void MyRiskAssessments_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executing(global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executed(global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_ExecuteFailed(global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor);
    
        #endregion
    
        #region Details Class
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        public static new class DetailsClass
        {
    
            static DetailsClass()
            {
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Employee>
                __EmployeesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Employee>(
                    "Employees",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Filter);
            private static bool __Employees_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Employees_CanInsert(ref result);
                return result;
            }
            private static bool __Employees_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Employees_CanUpdate(ref result);
                return result;
            }
            private static bool __Employees_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Employees_CanDelete(ref result);
                return result;
            }
            private static bool __Employees_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Employees_CanRead(ref result);
                return result;
            }
            private static void __Employees_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e)
            {
                d.Employees_Inserting(e);
            }
            private static void __Employees_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e)
            {
                d.Employees_Inserted(e);
            }
            private static void __Employees_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e)
            {
                d.Employees_Updating(e);
            }
            private static void __Employees_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e)
            {
                d.Employees_Updated(e);
            }
            private static void __Employees_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e)
            {
                d.Employees_Deleting(e);
            }
            private static void __Employees_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e)
            {
                d.Employees_Deleted(e);
            }
            private static void __Employees_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Employees_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Employee, bool>> __Employees_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Employee, bool>> filter = null;
                d.Employees_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.HazardType>
                __HazardTypesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.HazardType>(
                    "HazardTypes",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__HazardTypes_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__HazardTypes_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__HazardTypes_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__HazardTypes_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__HazardTypes_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__HazardTypes_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__HazardTypes_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__HazardTypes_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__HazardTypes_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__HazardTypes_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__HazardTypes_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__HazardTypes_Filter);
            private static bool __HazardTypes_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.HazardTypes_CanInsert(ref result);
                return result;
            }
            private static bool __HazardTypes_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.HazardTypes_CanUpdate(ref result);
                return result;
            }
            private static bool __HazardTypes_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.HazardTypes_CanDelete(ref result);
                return result;
            }
            private static bool __HazardTypes_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.HazardTypes_CanRead(ref result);
                return result;
            }
            private static void __HazardTypes_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.HazardType e)
            {
                d.HazardTypes_Inserting(e);
            }
            private static void __HazardTypes_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.HazardType e)
            {
                d.HazardTypes_Inserted(e);
            }
            private static void __HazardTypes_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.HazardType e)
            {
                d.HazardTypes_Updating(e);
            }
            private static void __HazardTypes_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.HazardType e)
            {
                d.HazardTypes_Updated(e);
            }
            private static void __HazardTypes_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.HazardType e)
            {
                d.HazardTypes_Deleting(e);
            }
            private static void __HazardTypes_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.HazardType e)
            {
                d.HazardTypes_Deleted(e);
            }
            private static void __HazardTypes_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.HazardType e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.HazardTypes_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.HazardType, bool>> __HazardTypes_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.HazardType, bool>> filter = null;
                d.HazardTypes_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessmentHazard>
                __RiskAssessmentHazardsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessmentHazard>(
                    "RiskAssessmentHazards",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentHazards_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentHazards_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentHazards_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentHazards_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentHazards_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentHazards_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentHazards_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentHazards_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentHazards_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentHazards_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentHazards_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentHazards_Filter);
            private static bool __RiskAssessmentHazards_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessmentHazards_CanInsert(ref result);
                return result;
            }
            private static bool __RiskAssessmentHazards_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessmentHazards_CanUpdate(ref result);
                return result;
            }
            private static bool __RiskAssessmentHazards_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessmentHazards_CanDelete(ref result);
                return result;
            }
            private static bool __RiskAssessmentHazards_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessmentHazards_CanRead(ref result);
                return result;
            }
            private static void __RiskAssessmentHazards_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentHazard e)
            {
                d.RiskAssessmentHazards_Inserting(e);
            }
            private static void __RiskAssessmentHazards_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentHazard e)
            {
                d.RiskAssessmentHazards_Inserted(e);
            }
            private static void __RiskAssessmentHazards_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentHazard e)
            {
                d.RiskAssessmentHazards_Updating(e);
            }
            private static void __RiskAssessmentHazards_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentHazard e)
            {
                d.RiskAssessmentHazards_Updated(e);
            }
            private static void __RiskAssessmentHazards_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentHazard e)
            {
                d.RiskAssessmentHazards_Deleting(e);
            }
            private static void __RiskAssessmentHazards_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentHazard e)
            {
                d.RiskAssessmentHazards_Deleted(e);
            }
            private static void __RiskAssessmentHazards_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentHazard e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.RiskAssessmentHazards_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessmentHazard, bool>> __RiskAssessmentHazards_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessmentHazard, bool>> filter = null;
                d.RiskAssessmentHazards_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessmentReview>
                __RiskAssessmentReviewsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessmentReview>(
                    "RiskAssessmentReviews",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentReviews_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentReviews_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentReviews_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentReviews_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentReviews_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentReviews_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentReviews_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentReviews_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentReviews_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentReviews_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentReviews_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentReviews_Filter);
            private static bool __RiskAssessmentReviews_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessmentReviews_CanInsert(ref result);
                return result;
            }
            private static bool __RiskAssessmentReviews_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessmentReviews_CanUpdate(ref result);
                return result;
            }
            private static bool __RiskAssessmentReviews_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessmentReviews_CanDelete(ref result);
                return result;
            }
            private static bool __RiskAssessmentReviews_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessmentReviews_CanRead(ref result);
                return result;
            }
            private static void __RiskAssessmentReviews_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentReview e)
            {
                d.RiskAssessmentReviews_Inserting(e);
            }
            private static void __RiskAssessmentReviews_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentReview e)
            {
                d.RiskAssessmentReviews_Inserted(e);
            }
            private static void __RiskAssessmentReviews_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentReview e)
            {
                d.RiskAssessmentReviews_Updating(e);
            }
            private static void __RiskAssessmentReviews_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentReview e)
            {
                d.RiskAssessmentReviews_Updated(e);
            }
            private static void __RiskAssessmentReviews_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentReview e)
            {
                d.RiskAssessmentReviews_Deleting(e);
            }
            private static void __RiskAssessmentReviews_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentReview e)
            {
                d.RiskAssessmentReviews_Deleted(e);
            }
            private static void __RiskAssessmentReviews_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentReview e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.RiskAssessmentReviews_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessmentReview, bool>> __RiskAssessmentReviews_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessmentReview, bool>> filter = null;
                d.RiskAssessmentReviews_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessment>
                __RiskAssessmentsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessment>(
                    "RiskAssessments",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessments_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessments_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessments_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessments_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessments_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessments_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessments_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessments_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessments_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessments_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessments_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessments_Filter);
            private static bool __RiskAssessments_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessments_CanInsert(ref result);
                return result;
            }
            private static bool __RiskAssessments_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessments_CanUpdate(ref result);
                return result;
            }
            private static bool __RiskAssessments_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessments_CanDelete(ref result);
                return result;
            }
            private static bool __RiskAssessments_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessments_CanRead(ref result);
                return result;
            }
            private static void __RiskAssessments_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessment e)
            {
                d.RiskAssessments_Inserting(e);
            }
            private static void __RiskAssessments_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessment e)
            {
                d.RiskAssessments_Inserted(e);
            }
            private static void __RiskAssessments_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessment e)
            {
                d.RiskAssessments_Updating(e);
            }
            private static void __RiskAssessments_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessment e)
            {
                d.RiskAssessments_Updated(e);
            }
            private static void __RiskAssessments_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessment e)
            {
                d.RiskAssessments_Deleting(e);
            }
            private static void __RiskAssessments_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessment e)
            {
                d.RiskAssessments_Deleted(e);
            }
            private static void __RiskAssessments_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessment e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.RiskAssessments_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessment, bool>> __RiskAssessments_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessment, bool>> filter = null;
                d.RiskAssessments_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessmentStatus>
                __RiskAssessmentStatusesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessmentStatus>(
                    "RiskAssessmentStatuses",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentStatuses_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentStatuses_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentStatuses_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentStatuses_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentStatuses_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentStatuses_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentStatuses_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentStatuses_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentStatuses_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentStatuses_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentStatuses_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessmentStatuses_Filter);
            private static bool __RiskAssessmentStatuses_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessmentStatuses_CanInsert(ref result);
                return result;
            }
            private static bool __RiskAssessmentStatuses_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessmentStatuses_CanUpdate(ref result);
                return result;
            }
            private static bool __RiskAssessmentStatuses_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessmentStatuses_CanDelete(ref result);
                return result;
            }
            private static bool __RiskAssessmentStatuses_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessmentStatuses_CanRead(ref result);
                return result;
            }
            private static void __RiskAssessmentStatuses_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentStatus e)
            {
                d.RiskAssessmentStatuses_Inserting(e);
            }
            private static void __RiskAssessmentStatuses_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentStatus e)
            {
                d.RiskAssessmentStatuses_Inserted(e);
            }
            private static void __RiskAssessmentStatuses_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentStatus e)
            {
                d.RiskAssessmentStatuses_Updating(e);
            }
            private static void __RiskAssessmentStatuses_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentStatus e)
            {
                d.RiskAssessmentStatuses_Updated(e);
            }
            private static void __RiskAssessmentStatuses_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentStatus e)
            {
                d.RiskAssessmentStatuses_Deleting(e);
            }
            private static void __RiskAssessmentStatuses_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentStatus e)
            {
                d.RiskAssessmentStatuses_Deleted(e);
            }
            private static void __RiskAssessmentStatuses_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessmentStatus e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.RiskAssessmentStatuses_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessmentStatus, bool>> __RiskAssessmentStatuses_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessmentStatus, bool>> filter = null;
                d.RiskAssessmentStatuses_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessor>
                __RiskAssessorsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessor>(
                    "RiskAssessors",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessors_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessors_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessors_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessors_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessors_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessors_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessors_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessors_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessors_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessors_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessors_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskAssessors_Filter);
            private static bool __RiskAssessors_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessors_CanInsert(ref result);
                return result;
            }
            private static bool __RiskAssessors_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessors_CanUpdate(ref result);
                return result;
            }
            private static bool __RiskAssessors_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessors_CanDelete(ref result);
                return result;
            }
            private static bool __RiskAssessors_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskAssessors_CanRead(ref result);
                return result;
            }
            private static void __RiskAssessors_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessor e)
            {
                d.RiskAssessors_Inserting(e);
            }
            private static void __RiskAssessors_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessor e)
            {
                d.RiskAssessors_Inserted(e);
            }
            private static void __RiskAssessors_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessor e)
            {
                d.RiskAssessors_Updating(e);
            }
            private static void __RiskAssessors_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessor e)
            {
                d.RiskAssessors_Updated(e);
            }
            private static void __RiskAssessors_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessor e)
            {
                d.RiskAssessors_Deleting(e);
            }
            private static void __RiskAssessors_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessor e)
            {
                d.RiskAssessors_Deleted(e);
            }
            private static void __RiskAssessors_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskAssessor e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.RiskAssessors_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessor, bool>> __RiskAssessors_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskAssessor, bool>> filter = null;
                d.RiskAssessors_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskType>
                __RiskTypesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskType>(
                    "RiskTypes",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskTypes_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskTypes_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskTypes_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskTypes_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskTypes_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskTypes_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskTypes_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskTypes_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskTypes_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskTypes_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskTypes_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__RiskTypes_Filter);
            private static bool __RiskTypes_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskTypes_CanInsert(ref result);
                return result;
            }
            private static bool __RiskTypes_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskTypes_CanUpdate(ref result);
                return result;
            }
            private static bool __RiskTypes_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskTypes_CanDelete(ref result);
                return result;
            }
            private static bool __RiskTypes_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.RiskTypes_CanRead(ref result);
                return result;
            }
            private static void __RiskTypes_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskType e)
            {
                d.RiskTypes_Inserting(e);
            }
            private static void __RiskTypes_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskType e)
            {
                d.RiskTypes_Inserted(e);
            }
            private static void __RiskTypes_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskType e)
            {
                d.RiskTypes_Updating(e);
            }
            private static void __RiskTypes_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskType e)
            {
                d.RiskTypes_Updated(e);
            }
            private static void __RiskTypes_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskType e)
            {
                d.RiskTypes_Deleting(e);
            }
            private static void __RiskTypes_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskType e)
            {
                d.RiskTypes_Deleted(e);
            }
            private static void __RiskTypes_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.RiskType e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.RiskTypes_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskType, bool>> __RiskTypes_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.RiskType, bool>> filter = null;
                d.RiskTypes_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.ApplicationDataService>
                __SaveChangesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.ApplicationDataService>(
                    "SaveChanges",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Failed);
            private static bool __SaveChanges_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.SaveChanges_CanExecute(ref r);
                return r;
            }
            private static void __SaveChanges_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SaveChanges_Executing();
            }
            private static void __SaveChanges_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SaveChanges_Executed();
            }
            private static void __SaveChanges_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.SaveChanges_ExecuteFailed(ex);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessmentReview>
                __MyRiskAssessmentReviewsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessmentReview>(
                    "MyRiskAssessmentReviews",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyRiskAssessmentReviews_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyRiskAssessmentReviews_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyRiskAssessmentReviews_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyRiskAssessmentReviews_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyRiskAssessmentReviews_PreprocessQuery);
            private static bool __MyRiskAssessmentReviews_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.MyRiskAssessmentReviews_CanExecute(ref r);
                return r;
            }
            private static void __MyRiskAssessmentReviews_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.MyRiskAssessmentReviews_Executing();
            }
            private static void __MyRiskAssessmentReviews_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.MyRiskAssessmentReviews_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.RiskAssessmentReview>)args[0]);
            }
            private static void __MyRiskAssessmentReviews_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.MyRiskAssessmentReviews_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __MyRiskAssessmentReviews_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.RiskAssessmentReview> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.RiskAssessmentReview>)args[0];
                d.MyRiskAssessmentReviews_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessmentReview>
                __OverdueRiskAssessmentReviewsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessmentReview>(
                    "OverdueRiskAssessmentReviews",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OverdueRiskAssessmentReviews_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OverdueRiskAssessmentReviews_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OverdueRiskAssessmentReviews_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OverdueRiskAssessmentReviews_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OverdueRiskAssessmentReviews_PreprocessQuery);
            private static bool __OverdueRiskAssessmentReviews_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.OverdueRiskAssessmentReviews_CanExecute(ref r);
                return r;
            }
            private static void __OverdueRiskAssessmentReviews_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.OverdueRiskAssessmentReviews_Executing();
            }
            private static void __OverdueRiskAssessmentReviews_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.OverdueRiskAssessmentReviews_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.RiskAssessmentReview>)args[0]);
            }
            private static void __OverdueRiskAssessmentReviews_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.OverdueRiskAssessmentReviews_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __OverdueRiskAssessmentReviews_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.RiskAssessmentReview> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.RiskAssessmentReview>)args[0];
                d.OverdueRiskAssessmentReviews_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessment>
                __MyRiskAssessmentsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.RiskAssessment>(
                    "MyRiskAssessments",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyRiskAssessments_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyRiskAssessments_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyRiskAssessments_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyRiskAssessments_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyRiskAssessments_PreprocessQuery);
            private static bool __MyRiskAssessments_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.MyRiskAssessments_CanExecute(ref r);
                return r;
            }
            private static void __MyRiskAssessments_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.MyRiskAssessments_Executing();
            }
            private static void __MyRiskAssessments_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.MyRiskAssessments_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.RiskAssessment>)args[0]);
            }
            private static void __MyRiskAssessments_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.MyRiskAssessments_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __MyRiskAssessments_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.RiskAssessment> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.RiskAssessment>)args[0];
                d.MyRiskAssessments_PreprocessQuery(ref query);
                return query;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.ApplicationDataService>
                ___QueryEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.ApplicationDataService>(
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Query_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Query_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Query_Failed);
            private static void __Query_Executing(global::LightSwitchApplication.ApplicationDataService d, global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor)
            {
                d.Query_Executing(queryDescriptor);
            }
            private static void __Query_Executed(global::LightSwitchApplication.ApplicationDataService d, global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor)
            {
                d.Query_Executed(queryDescriptor);
            }
            private static void __Query_Failed(global::LightSwitchApplication.ApplicationDataService d, global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor)
            {
                d.Query_ExecuteFailed(queryDescriptor);
            }
        }
    
        #endregion
    }
    
    #endregion
}
